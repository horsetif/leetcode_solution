517. 超级洗衣机

假设有 n 台超级洗衣机放在同一排上。开始的时候，每台洗衣机内可能有一定量的衣服，也可能是空的。

在每一步操作中，你可以选择任意 m （1 ≤ m ≤ n） 台洗衣机，与此同时将每台洗衣机的一件衣服送到相邻的一台洗衣机。

给定一个非负整数数组代表从左至右每台洗衣机中的衣物数量，请给出能让所有洗衣机中剩下的衣物的数量相等的最少的操作步数。如果不能使每台洗衣机中衣物的数量相等，则返回 -1。

 

示例 1：

输入: [1,0,5]

输出: 3

解释:
第一步:    1     0 <-- 5    =>    1     1     4
第二步:    1 <-- 1 <-- 4    =>    2     1     3    
第三步:    2     1 <-- 3    =>    2     2     2   
示例 2：

输入: [0,3,0]

输出: 2

解释:
第一步:    0 <-- 3     0    =>    1     2     0    
第二步:    1     2 --> 0    =>    1     1     1     
示例 3:

输入: [0,2,0]

输出: -1

解释:
不可能让所有三个洗衣机同时剩下相同数量的衣物。


/*
首先计算下需要的平均值。（如果不能整除，那说明不可能）
遍历所有点，查找左边的总和a，和右边的总和b。
计算左边需要的真正的个数A 和 右边需要的真正的个数B。
L = A - a; R = B - b;
如果 L，R 同时 大于0，那么说明两边都需要输入资源，那么 res = max(res, L+R)
其他情况，L R 都不需要同时输入资源，此时， res = max(res, max(abs(L), abs(R)))
*/
int findMinMoves(vector<int>& machines) {
    int res = 0, n = machines.size(), sum = 0;
    if(n <= 0) return -1;      
    for(auto machine : machines)
        sum += machine;
    if(sum%n != 0) return -1; //不能整除
    int avg = sum / n;//每一个通能放多少衣服
    int cur = 0; //当前和
    for(int i = 0; i < n; i++){
        int L = i * avg - cur;//左边的差值
        int R = (n - i - 1) * avg - (sum - cur - machines[i]);//右边的差值
        if(L > 0 && R > 0){//两边都需要输入资源，那么都要扩散
            res = max(res, L + R);
        }
        else{
            res = max(res, max(abs(L), abs(R)));
        }
        cur += machines[i];
    }
    return res;
}